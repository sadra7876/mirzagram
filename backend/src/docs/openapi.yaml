openapi: 3.0.0

info:
  title: Mirzagram API
  version: 1.0.0
  description: APIs for Mirzagram.

tags:
  - name: Auth
    description: Operations related to user authentication.
  - name: Upload File
    description: Operations related to file uploads
  - name: CDN
    description: Operations related to retrieving `files` / `images` / `videos` from server

security:
  - BearerAuth:
      - read
      - write
paths:
  /auth/sign-up:
    post:
      summary: Signup new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupDTO"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/ApiResponse"
                  - type: object
                    properties:
                      result:
                        type: object
                        properties:
                          accessToken:
                            type: string
  /auth/sign-in:
    post:
      summary: Signin user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigninDTO"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/ApiResponse"
                  - type: object
                    properties:
                      result:
                        type: object
                        properties:
                          accessToken:
                            type: string
  /auth/forgot-password:
    post:
      summary: Request forget password email for user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordDTO"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/ApiResponse"
                  - type: object
  /auth/reset-password:
    post:
      summary: Reset user password using forget token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordDTO"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/ApiResponse"
                  - type: object
  /profile:
    get:
      summary: get profile content
      tags: [profile]
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/ApiResponse"
                  - type: object
                    properties:
                      result:
                        $ref: "#components/schemas/ProfileResponseDTO"

    put:
      summary: update profile
      tags: [profile]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileRequestDTO"

  # add jwt auth for this please
  /upload:
    post:
      summary: Upload file
      tags: [Upload File]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [post, profile]
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/UploadResponce"
                  - type: object
  /cdn/{type}/{filename}:
    get:
      tags: [CDN]
      summary: Retrieve a file by type and filename
      description: Get a file from the specified type directory by its filename.
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [profiles, post, others]
          description: The type of the file (e.g., profiles, post, others)
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: The name of the file to retrieve
      responses:
        "200":
          description: Successfully retrieved the file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        "404":
          description: File not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    UploadResponce:
      type: object
      properties:
        isSuccess:
          type: boolean
        statusCode:
          type: number
        result:
          type: object
          properties:
            fileName:
              type: string
            paths:
              type: string
            timeCreated:
              type: string
            uploadType:
              type: string
              enum:
                - post
                - profile
                - other
        messages:
          type: array
    ApiResponse:
      type: object
      properties:
        isSuccess:
          type: boolean
        statusCode:
          type: number
        result:
          type: object
        messages:
          type: array
    SignupDTO:
      type: object
      required:
        - username
        - email
        - password
        - confirmPassword
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    SigninDTO:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
        password:
          type: string
    ResetPasswordDTO:
      type: object
      required:
        - token
        - password
        - confirmPassword
      properties:
        token:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    ForgotPasswordDTO:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    ProfileRequestDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        isPrivate:
          type: boolean
        bio:
          type: string
        profilePicture:
          type: string
    ProfileResponseDTO:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
        isPrivate:
          type: boolean
        bio:
          type: string
          nullable: true
        profilePicture:
          type: string
          nullable: true
        createdAt:
          type: string
    UploadDTO:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [post, profile]
